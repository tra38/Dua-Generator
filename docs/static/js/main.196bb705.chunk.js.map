{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","citationFormatter","passage","licenseInfo","shortened_new_quote","shortened_original_quote","source_link","generateQuoteShorterner","license","license_url","finalCitation","concat","quote","text_array","split","first_phrase","slice","join","second_phrase","arabicParagraphFormatter","json","englishParagraphFormatter","urduParagraphFormatter","Generator","jsonArray","array","size","console","log","temp","index","shuffled","i","length","min","Math","floor","random","getRandomSubarray","formatContent","duaArray","mappableFunction","map","x","Content","props","className","text","Fragment","key","ArabicText","UrduTranslation","EnglishTranslation","Citations","sharingText","link","arrayOfMappableFunctions","finalArray","forEach","push","formatContentArray","SharingWidget","mystyle","display","navigator","share","type","title","this","displayText","style","onClick","React","Component","App","state","src","logo","alt","setState","window","location","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.196bb705.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport jsonArray from './duas/duas.json';\n\n//https://stackoverflow.com/a/11935263\nfunction getRandomSubarray(array, size)\n{\n  console.log(\"HELLO WORLD!\");\n  console.log(array);\n  var shuffled = array.slice(0);\n  var i = array.length;\n  var min = i - size;\n  var temp;\n  var index;\n\n  //conduct partial shuffle of array\n  while (i-- > min) {\n    index = Math.floor((i + 1) * Math.random());\n    temp = shuffled[index];\n    shuffled[index] = shuffled[i];\n    shuffled[i] = temp;\n  }\n\n  return shuffled.slice(min);\n}\n\nfunction citationFormatter(passage) {\n    var licenseInfo, shortened_new_quote, shortened_original_quote, source_link;\n    shortened_new_quote = generateQuoteShorterner(passage[\"english_translation\"]);\n\n    source_link = passage[\"source\"];\n\n    var finalCitation = `- \"${shortened_new_quote}\" is from ${source_link}`\n\n    if ( \"license\" in passage )\n    {\n        if ( \"license_url\" in passage )\n        {\n          licenseInfo = generateLink(passage[\"license\"], passage[\"license_url\"]);\n        }\n        else\n        {\n          licenseInfo = `${passage[\"license_url\"]}`;\n        }\n        finalCitation = finalCitation.concat(`, ${licenseInfo}.`);\n    }\n    else\n    {\n        finalCitation = finalCitation.concat(\".\")\n    }\n\n    if ( \"original_quote\" in passage )\n    {\n        shortened_original_quote = generateQuoteShorterner(passage[\"original_quote\"]);\n        finalCitation = finalCitation.concat(` Quote modified from original - original quote is ${shortened_original_quote}.`)\n    }\n\n    return finalCitation;\n}\n\nfunction generateQuoteShorterner(quote) {\n    var text_array = quote.split(\" \");\n    var first_phrase = text_array.slice(0, 3).join(\" \");\n    var second_phrase = text_array.slice((- 3)).join(\" \");\n    return `${first_phrase} ... ${second_phrase}`;\n}\n\nfunction generateLink(license, license_url) {\n    return `[${license}](${license_url})`;\n}\n\nfunction arabicParagraphFormatter(json)\n{\n  return json[\"original_arabic\"];\n}\n\nfunction englishParagraphFormatter(json)\n{\n  return json[\"english_translation\"];\n}\n\nfunction urduParagraphFormatter(json)\n{\n  return json[\"urdu_translation\"];\n}\n\n\nfunction Generator(jsonArray)\n{\n  return getRandomSubarray(jsonArray, 3);\n}\n\n//https://www.freecodecamp.org/forum/t/newline-in-react-string-solved/68484/18\nconst addLineBreaks = content =>\n  content.split('\\n').map((text, index) => (\n    <React.Fragment key={`${text}-${index}`}>\n      {text}\n      <br />\n    </React.Fragment>\n  ));\n\nvar formatContent = (duaArray, mappableFunction) => duaArray.map( x => mappableFunction(x) ).join(\"\\n\\n\");\n\nfunction formatContentArray(duaArray, arrayOfMappableFunctions)\n{\n  var finalArray = [];\n  arrayOfMappableFunctions.forEach( mappableFunction =>\n    finalArray.push(formatContent(duaArray, mappableFunction))\n  );\n\n  return finalArray.join(\"\\n\\n\");\n}\n\nvar Content = (props) => <div className={props.className}>{addLineBreaks(formatContent(props.duaArray, props.mappableFunction))}</div>\n\nvar ArabicText = (props) => <Content duaArray={props.duaArray} mappableFunction={arabicParagraphFormatter} className={\"App-content\"} />\n\nvar UrduTranslation = (props) => <Content duaArray={props.duaArray} mappableFunction={urduParagraphFormatter} className={\"App-content\"} />\n\nvar EnglishTranslation = (props) => <Content duaArray={props.duaArray} mappableFunction={englishParagraphFormatter} className={\"App-content\"} />\n\nvar Citations = (props) => <Content duaArray={props.duaArray} mappableFunction={citationFormatter} className={\"App-citations App-content\"} />\n\nvar sharingText = (duaArray, link) => `${formatContentArray(duaArray, [arabicParagraphFormatter,  englishParagraphFormatter, citationFormatter])}\\n\\nIf you like this dua, please share it to others! You can also visit ${link} to generate duas of your own!`\n\n//https://css-tricks.com/how-to-use-the-web-share-api/\nclass SharingWidget extends React.Component\n{\n  render() {\n    const mystyle = {\n      display: ( navigator.share ? \"inline\" : \"none\")\n    }\n    return(\n        <button className=\"sharing-button\"\n                type=\"button\"\n                title={this.props.displayText}\n                style={mystyle}\n                onClick={() =>\n                  navigator.share({\n                    text: sharingText(this.props.duaArray, this.props.link),\n                  })\n                }>\n          <span>{this.props.displayText}</span>\n        </button>\n    )\n  }\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        key: Generator(jsonArray)\n    };\n  }\n\n  render() {\n    var myStyle = {\n      \"margin-bottom\": \"3%\"\n    };\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <ArabicText duaArray = {this.state.key } style= {myStyle} />\n          <UrduTranslation duaArray={this.state.key} />\n          <EnglishTranslation duaArray = {this.state.key} />\n          <br />\n          <Citations duaArray = {this.state.key} />\n          <br />\n          <button onClick={() => this.setState({ key: Generator(jsonArray) })}>Reload</button>\n          <SharingWidget link={window.location.href} duaArray={this.state.key}  displayText={\"Share This Dua\"} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}